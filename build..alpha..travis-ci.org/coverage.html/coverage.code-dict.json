{"/home/travis/build/npmtest/node-npmtest-twitter-text/test.js":"/* istanbul instrument in package npmtest_twitter_text */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-twitter-text/lib.npmtest_twitter_text.js":"/* istanbul instrument in package npmtest_twitter_text */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_twitter_text = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_twitter_text = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-twitter-text/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-twitter-text && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_twitter_text */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_twitter_text\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_twitter_text.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_twitter_text.rollup.js'] =\n            local.assetsDict['/assets.npmtest_twitter_text.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_twitter_text.__dirname + '/lib.npmtest_twitter_text.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-twitter-text/node_modules/twitter-text/twitter-text.js":"(function() {\n  if (typeof twttr === \"undefined\" || twttr === null) {\n    var twttr = {};\n  }\n\n  twttr.txt = {};\n  twttr.txt.regexen = {};\n\n  var HTML_ENTITIES = {\n    '&': '&amp;',\n    '>': '&gt;',\n    '<': '&lt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  // HTML escaping\n  twttr.txt.htmlEscape = function(text) {\n    return text && text.replace(/[&\"'><]/g, function(character) {\n      return HTML_ENTITIES[character];\n    });\n  };\n\n  // Builds a RegExp\n  function regexSupplant(regex, flags) {\n    flags = flags || \"\";\n    if (typeof regex !== \"string\") {\n      if (regex.global && flags.indexOf(\"g\") < 0) {\n        flags += \"g\";\n      }\n      if (regex.ignoreCase && flags.indexOf(\"i\") < 0) {\n        flags += \"i\";\n      }\n      if (regex.multiline && flags.indexOf(\"m\") < 0) {\n        flags += \"m\";\n      }\n\n      regex = regex.source;\n    }\n\n    return new RegExp(regex.replace(/#\\{(\\w+)\\}/g, function(match, name) {\n      var newRegex = twttr.txt.regexen[name] || \"\";\n      if (typeof newRegex !== \"string\") {\n        newRegex = newRegex.source;\n      }\n      return newRegex;\n    }), flags);\n  }\n\n  twttr.txt.regexSupplant = regexSupplant;\n\n  // simple string interpolation\n  function stringSupplant(str, values) {\n    return str.replace(/#\\{(\\w+)\\}/g, function(match, name) {\n      return values[name] || \"\";\n    });\n  }\n\n  twttr.txt.stringSupplant = stringSupplant;\n\n  twttr.txt.regexen.spaces_group = /\\x09-\\x0D\\x20\\x85\\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000/;\n  twttr.txt.regexen.spaces = regexSupplant(/[#{spaces_group}]/);\n  twttr.txt.regexen.invalid_chars_group = /\\uFFFE\\uFEFF\\uFFFF\\u202A-\\u202E/;\n  twttr.txt.regexen.invalid_chars = regexSupplant(/[#{invalid_chars_group}]/);\n  twttr.txt.regexen.punct = /\\!'#%&'\\(\\)*\\+,\\\\\\-\\.\\/:;<=>\\?@\\[\\]\\^_{|}~\\$/;\n  twttr.txt.regexen.rtl_chars = /[\\u0600-\\u06FF]|[\\u0750-\\u077F]|[\\u0590-\\u05FF]|[\\uFE70-\\uFEFF]/mg;\n  twttr.txt.regexen.non_bmp_code_pairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/mg;\n\n  twttr.txt.regexen.latinAccentChars = /\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF\\u0100-\\u024F\\u0253\\u0254\\u0256\\u0257\\u0259\\u025B\\u0263\\u0268\\u026F\\u0272\\u0289\\u028B\\u02BB\\u0300-\\u036F\\u1E00-\\u1EFF/;\n\n  // Generated from unicode_regex/unicode_regex_groups.scala, same as objective c's \\p{L}\\p{M}\n  twttr.txt.regexen.bmpLetterAndMarks = /A-Za-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u065f\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07ca-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0-\\u08b2\\u08e4-\\u0963\\u0971-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09f0\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a70-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0c00-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c81-\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0cf1\\u0cf2\\u0d01-\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u103f\\u1050-\\u108f\\u109a-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16f1-\\u16f8\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u180b-\\u180d\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1920-\\u192b\\u1930-\\u193b\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f\\u1aa7\\u1ab0-\\u1abe\\u1b00-\\u1b4b\\u1b6b-\\u1b73\\u1b80-\\u1baf\\u1bba-\\u1bf3\\u1c00-\\u1c37\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1cf8\\u1cf9\\u1d00-\\u1df5\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2183\\u2184\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005\\u3006\\u302a-\\u302f\\u3031-\\u3035\\u303b\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua672\\ua674-\\ua67d\\ua67f-\\ua69d\\ua69f-\\ua6e5\\ua6f0\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua7ad\\ua7b0\\ua7b1\\ua7f7-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8e0-\\ua8f7\\ua8fb\\ua90a-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf\\ua9e0-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa60-\\uaa76\\uaa7a-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab5f\\uab64\\uab65\\uabc0-\\uabea\\uabec\\uabed\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf870-\\uf87f\\uf882\\uf884-\\uf89f\\uf8b8\\uf8c1-\\uf8d6\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe2d\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc/;\n  twttr.txt.regexen.astralLetterAndMarks = /\\ud800[\\udc00-\\udc0b\\udc0d-\\udc26\\udc28-\\udc3a\\udc3c\\udc3d\\udc3f-\\udc4d\\udc50-\\udc5d\\udc80-\\udcfa\\uddfd\\ude80-\\ude9c\\udea0-\\uded0\\udee0\\udf00-\\udf1f\\udf30-\\udf40\\udf42-\\udf49\\udf50-\\udf7a\\udf80-\\udf9d\\udfa0-\\udfc3\\udfc8-\\udfcf]|\\ud801[\\udc00-\\udc9d\\udd00-\\udd27\\udd30-\\udd63\\ude00-\\udf36\\udf40-\\udf55\\udf60-\\udf67]|\\ud802[\\udc00-\\udc05\\udc08\\udc0a-\\udc35\\udc37\\udc38\\udc3c\\udc3f-\\udc55\\udc60-\\udc76\\udc80-\\udc9e\\udd00-\\udd15\\udd20-\\udd39\\udd80-\\uddb7\\uddbe\\uddbf\\ude00-\\ude03\\ude05\\ude06\\ude0c-\\ude13\\ude15-\\ude17\\ude19-\\ude33\\ude38-\\ude3a\\ude3f\\ude60-\\ude7c\\ude80-\\ude9c\\udec0-\\udec7\\udec9-\\udee6\\udf00-\\udf35\\udf40-\\udf55\\udf60-\\udf72\\udf80-\\udf91]|\\ud803[\\udc00-\\udc48]|\\ud804[\\udc00-\\udc46\\udc7f-\\udcba\\udcd0-\\udce8\\udd00-\\udd34\\udd50-\\udd73\\udd76\\udd80-\\uddc4\\uddda\\ude00-\\ude11\\ude13-\\ude37\\udeb0-\\udeea\\udf01-\\udf03\\udf05-\\udf0c\\udf0f\\udf10\\udf13-\\udf28\\udf2a-\\udf30\\udf32\\udf33\\udf35-\\udf39\\udf3c-\\udf44\\udf47\\udf48\\udf4b-\\udf4d\\udf57\\udf5d-\\udf63\\udf66-\\udf6c\\udf70-\\udf74]|\\ud805[\\udc80-\\udcc5\\udcc7\\udd80-\\uddb5\\uddb8-\\uddc0\\ude00-\\ude40\\ude44\\ude80-\\udeb7]|\\ud806[\\udca0-\\udcdf\\udcff\\udec0-\\udef8]|\\ud808[\\udc00-\\udf98]|\\ud80c[\\udc00-\\udfff]|\\ud80d[\\udc00-\\udc2e]|\\ud81a[\\udc00-\\ude38\\ude40-\\ude5e\\uded0-\\udeed\\udef0-\\udef4\\udf00-\\udf36\\udf40-\\udf43\\udf63-\\udf77\\udf7d-\\udf8f]|\\ud81b[\\udf00-\\udf44\\udf50-\\udf7e\\udf8f-\\udf9f]|\\ud82c[\\udc00\\udc01]|\\ud82f[\\udc00-\\udc6a\\udc70-\\udc7c\\udc80-\\udc88\\udc90-\\udc99\\udc9d\\udc9e]|\\ud834[\\udd65-\\udd69\\udd6d-\\udd72\\udd7b-\\udd82\\udd85-\\udd8b\\uddaa-\\uddad\\ude42-\\ude44]|\\ud835[\\udc00-\\udc54\\udc56-\\udc9c\\udc9e\\udc9f\\udca2\\udca5\\udca6\\udca9-\\udcac\\udcae-\\udcb9\\udcbb\\udcbd-\\udcc3\\udcc5-\\udd05\\udd07-\\udd0a\\udd0d-\\udd14\\udd16-\\udd1c\\udd1e-\\udd39\\udd3b-\\udd3e\\udd40-\\udd44\\udd46\\udd4a-\\udd50\\udd52-\\udea5\\udea8-\\udec0\\udec2-\\udeda\\udedc-\\udefa\\udefc-\\udf14\\udf16-\\udf34\\udf36-\\udf4e\\udf50-\\udf6e\\udf70-\\udf88\\udf8a-\\udfa8\\udfaa-\\udfc2\\udfc4-\\udfcb]|\\ud83a[\\udc00-\\udcc4\\udcd0-\\udcd6]|\\ud83b[\\ude00-\\ude03\\ude05-\\ude1f\\ude21\\ude22\\ude24\\ude27\\ude29-\\ude32\\ude34-\\ude37\\ude39\\ude3b\\ude42\\ude47\\ude49\\ude4b\\ude4d-\\ude4f\\ude51\\ude52\\ude54\\ude57\\ude59\\ude5b\\ude5d\\ude5f\\ude61\\ude62\\ude64\\ude67-\\ude6a\\ude6c-\\ude72\\ude74-\\ude77\\ude79-\\ude7c\\ude7e\\ude80-\\ude89\\ude8b-\\ude9b\\udea1-\\udea3\\udea5-\\udea9\\udeab-\\udebb]|\\ud840[\\udc00-\\udfff]|\\ud841[\\udc00-\\udfff]|\\ud842[\\udc00-\\udfff]|\\ud843[\\udc00-\\udfff]|\\ud844[\\udc00-\\udfff]|\\ud845[\\udc00-\\udfff]|\\ud846[\\udc00-\\udfff]|\\ud847[\\udc00-\\udfff]|\\ud848[\\udc00-\\udfff]|\\ud849[\\udc00-\\udfff]|\\ud84a[\\udc00-\\udfff]|\\ud84b[\\udc00-\\udfff]|\\ud84c[\\udc00-\\udfff]|\\ud84d[\\udc00-\\udfff]|\\ud84e[\\udc00-\\udfff]|\\ud84f[\\udc00-\\udfff]|\\ud850[\\udc00-\\udfff]|\\ud851[\\udc00-\\udfff]|\\ud852[\\udc00-\\udfff]|\\ud853[\\udc00-\\udfff]|\\ud854[\\udc00-\\udfff]|\\ud855[\\udc00-\\udfff]|\\ud856[\\udc00-\\udfff]|\\ud857[\\udc00-\\udfff]|\\ud858[\\udc00-\\udfff]|\\ud859[\\udc00-\\udfff]|\\ud85a[\\udc00-\\udfff]|\\ud85b[\\udc00-\\udfff]|\\ud85c[\\udc00-\\udfff]|\\ud85d[\\udc00-\\udfff]|\\ud85e[\\udc00-\\udfff]|\\ud85f[\\udc00-\\udfff]|\\ud860[\\udc00-\\udfff]|\\ud861[\\udc00-\\udfff]|\\ud862[\\udc00-\\udfff]|\\ud863[\\udc00-\\udfff]|\\ud864[\\udc00-\\udfff]|\\ud865[\\udc00-\\udfff]|\\ud866[\\udc00-\\udfff]|\\ud867[\\udc00-\\udfff]|\\ud868[\\udc00-\\udfff]|\\ud869[\\udc00-\\uded6\\udf00-\\udfff]|\\ud86a[\\udc00-\\udfff]|\\ud86b[\\udc00-\\udfff]|\\ud86c[\\udc00-\\udfff]|\\ud86d[\\udc00-\\udf34\\udf40-\\udfff]|\\ud86e[\\udc00-\\udc1d]|\\ud87e[\\udc00-\\ude1d]|\\udb40[\\udd00-\\uddef]/;\n\n  // Generated from unicode_regex/unicode_regex_groups.scala, same as objective c's \\p{Nd}\n  twttr.txt.regexen.bmpNumerals = /0-9\\u0660-\\u0669\\u06f0-\\u06f9\\u07c0-\\u07c9\\u0966-\\u096f\\u09e6-\\u09ef\\u0a66-\\u0a6f\\u0ae6-\\u0aef\\u0b66-\\u0b6f\\u0be6-\\u0bef\\u0c66-\\u0c6f\\u0ce6-\\u0cef\\u0d66-\\u0d6f\\u0de6-\\u0def\\u0e50-\\u0e59\\u0ed0-\\u0ed9\\u0f20-\\u0f29\\u1040-\\u1049\\u1090-\\u1099\\u17e0-\\u17e9\\u1810-\\u1819\\u1946-\\u194f\\u19d0-\\u19d9\\u1a80-\\u1a89\\u1a90-\\u1a99\\u1b50-\\u1b59\\u1bb0-\\u1bb9\\u1c40-\\u1c49\\u1c50-\\u1c59\\ua620-\\ua629\\ua8d0-\\ua8d9\\ua900-\\ua909\\ua9d0-\\ua9d9\\ua9f0-\\ua9f9\\uaa50-\\uaa59\\uabf0-\\uabf9\\uff10-\\uff19/;\n  twttr.txt.regexen.astralNumerals = /\\ud801[\\udca0-\\udca9]|\\ud804[\\udc66-\\udc6f\\udcf0-\\udcf9\\udd36-\\udd3f\\uddd0-\\uddd9\\udef0-\\udef9]|\\ud805[\\udcd0-\\udcd9\\ude50-\\ude59\\udec0-\\udec9]|\\ud806[\\udce0-\\udce9]|\\ud81a[\\ude60-\\ude69\\udf50-\\udf59]|\\ud835[\\udfce-\\udfff]/;\n\n  twttr.txt.regexen.hashtagSpecialChars = /_\\u200c\\u200d\\ua67e\\u05be\\u05f3\\u05f4\\uff5e\\u301c\\u309b\\u309c\\u30a0\\u30fb\\u3003\\u0f0b\\u0f0c\\xb7/;\n\n  // A hashtag must contain at least one unicode letter or mark, as well as numbers, underscores, and select special characters.\n  twttr.txt.regexen.hashSigns = /[#＃]/;\n  twttr.txt.regexen.hashtagAlpha = regexSupplant(/(?:[#{bmpLetterAndMarks}]|(?=#{non_bmp_code_pairs})(?:#{astralLetterAndMarks}))/);\n  twttr.txt.regexen.hashtagAlphaNumeric = regexSupplant(/(?:[#{bmpLetterAndMarks}#{bmpNumerals}#{hashtagSpecialChars}]|(?=#{non_bmp_code_pairs})(?:#{astralLetterAndMarks}|#{astralNumerals}))/);\n  twttr.txt.regexen.endHashtagMatch = regexSupplant(/^(?:#{hashSigns}|:\\/\\/)/);\n  twttr.txt.regexen.codePoint = /(?:[^\\uD800-\\uDFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/;\n  twttr.txt.regexen.hashtagBoundary = regexSupplant(/(?:^|$|(?!#{hashtagAlphaNumeric}|&)#{codePoint})/);\n  twttr.txt.regexen.validHashtag = regexSupplant(/(#{hashtagBoundary})(#{hashSigns})(?!\\uFE0F|\\u20E3)(#{hashtagAlphaNumeric}*#{hashtagAlpha}#{hashtagAlphaNumeric}*)/gi);\n\n  // Mention related regex collection\n  twttr.txt.regexen.validMentionPrecedingChars = /(?:^|[^a-zA-Z0-9_!#$%&*@＠]|(?:^|[^a-zA-Z0-9_+~.-])(?:rt|RT|rT|Rt):?)/;\n  twttr.txt.regexen.atSigns = /[@＠]/;\n  twttr.txt.regexen.validMentionOrList = regexSupplant(\n    '(#{validMentionPrecedingChars})' +  // $1: Preceding character\n    '(#{atSigns})' +                     // $2: At mark\n    '([a-zA-Z0-9_]{1,20})' +             // $3: Screen name\n    '(\\/[a-zA-Z][a-zA-Z0-9_\\-]{0,24})?'  // $4: List (optional)\n  , 'g');\n  twttr.txt.regexen.validReply = regexSupplant(/^(?:#{spaces})*#{atSigns}([a-zA-Z0-9_]{1,20})/);\n  twttr.txt.regexen.endMentionMatch = regexSupplant(/^(?:#{atSigns}|[#{latinAccentChars}]|:\\/\\/)/);\n\n  // URL related regex collection\n  twttr.txt.regexen.validUrlPrecedingChars = regexSupplant(/(?:[^A-Za-z0-9@＠$#＃#{invalid_chars_group}]|^)/);\n  twttr.txt.regexen.invalidUrlWithoutProtocolPrecedingChars = /[-_.\\/]$/;\n  twttr.txt.regexen.invalidDomainChars = stringSupplant(\"#{punct}#{spaces_group}#{invalid_chars_group}\", twttr.txt.regexen);\n  twttr.txt.regexen.validDomainChars = regexSupplant(/[^#{invalidDomainChars}]/);\n  twttr.txt.regexen.validSubdomain = regexSupplant(/(?:(?:#{validDomainChars}(?:[_-]|#{validDomainChars})*)?#{validDomainChars}\\.)/);\n  twttr.txt.regexen.validDomainName = regexSupplant(/(?:(?:#{validDomainChars}(?:-|#{validDomainChars})*)?#{validDomainChars}\\.)/);\n  twttr.txt.regexen.validGTLD = regexSupplant(RegExp(\n'(?:(?:' +\n    '삼성|닷컴|닷넷|香格里拉|餐厅|食品|飞利浦|電訊盈科|集团|通販|购物|谷歌|诺基亚|联通|网络|网站|网店|网址|组织机构|移动|珠宝|点看|游戏|淡马锡|机构|書籍|时尚|新闻|政府|' +\n    '政务|手表|手机|我爱你|慈善|微博|广东|工行|家電|娱乐|天主教|大拿|大众汽车|在线|嘉里大酒店|嘉里|商标|商店|商城|公益|公司|八卦|健康|信息|佛山|企业|中文网|中信|世界|' +\n    'ポイント|ファッション|セール|ストア|コム|グーグル|クラウド|みんな|คอม|संगठन|नेट|कॉम|همراه|موقع|موبايلي|كوم|كاثوليك|شبكة|بيتك|' +\n    'بازار|العليان|ارامكو|ابوظبي|קום|сайт|рус|орг|онлайн|москва|ком|католик|дети|zuerich|zone|zippo|' +\n    'zip|zero|zara|zappos|yun|youtube|you|yokohama|yoga|yodobashi|yandex|yamaxun|yahoo|yachts|xyz|' +\n    'xxx|xperia|xin|xihuan|xfinity|xerox|xbox|wtf|wtc|wow|world|works|work|woodside|wolterskluwer|' +\n    'wme|winners|wine|windows|win|williamhill|wiki|wien|whoswho|weir|weibo|wedding|wed|website|weber|' +\n    'webcam|weatherchannel|weather|watches|watch|warman|wanggou|wang|walter|walmart|wales|vuelos|' +\n    'voyage|voto|voting|vote|volvo|volkswagen|vodka|vlaanderen|vivo|viva|vistaprint|vista|vision|' +\n    'visa|virgin|vip|vin|villas|viking|vig|video|viajes|vet|versicherung|vermögensberatung|' +\n    'vermögensberater|verisign|ventures|vegas|vanguard|vana|vacations|ups|uol|uno|university|unicom|' +\n    'uconnect|ubs|ubank|tvs|tushu|tunes|tui|tube|trv|trust|travelersinsurance|travelers|' +\n    'travelchannel|travel|training|trading|trade|toys|toyota|town|tours|total|toshiba|toray|top|' +\n    'tools|tokyo|today|tmall|tkmaxx|tjx|tjmaxx|tirol|tires|tips|tiffany|tienda|tickets|tiaa|theatre|' +\n    'theater|thd|teva|tennis|temasek|telefonica|telecity|tel|technology|tech|team|tdk|tci|taxi|tax|' +\n    'tattoo|tatar|tatamotors|target|taobao|talk|taipei|tab|systems|symantec|sydney|swiss|swiftcover|' +\n    'swatch|suzuki|surgery|surf|support|supply|supplies|sucks|style|study|studio|stream|store|' +\n    'storage|stockholm|stcgroup|stc|statoil|statefarm|statebank|starhub|star|staples|stada|srt|srl|' +\n    'spreadbetting|spot|spiegel|space|soy|sony|song|solutions|solar|sohu|software|softbank|social|' +\n    'soccer|sncf|smile|smart|sling|skype|sky|skin|ski|site|singles|sina|silk|shriram|showtime|show|' +\n    'shouji|shopping|shop|shoes|shiksha|shia|shell|shaw|sharp|shangrila|sfr|sexy|sex|sew|seven|ses|' +\n    'services|sener|select|seek|security|secure|seat|scot|scor|scjohnson|science|schwarz|schule|' +\n    'school|scholarships|schmidt|schaeffler|scb|sca|sbs|sbi|saxo|save|sas|sarl|sapo|sap|sanofi|' +\n    'sandvikcoromant|sandvik|samsung|samsclub|salon|sale|sakura|safety|safe|saarland|ryukyu|rwe|run|' +\n    'ruhr|rsvp|room|rogers|rodeo|rocks|rocher|rmit|rip|rio|ril|rightathome|ricoh|richardli|rich|' +\n    'rexroth|reviews|review|restaurant|rest|republican|report|repair|rentals|rent|ren|reliance|reit|' +\n    'reisen|reise|rehab|redumbrella|redstone|red|recipes|realty|realtor|realestate|read|raid|radio|' +\n    'racing|qvc|quest|quebec|qpon|pwc|pub|prudential|pru|protection|property|properties|promo|' +\n    'progressive|prof|productions|prod|pro|prime|press|praxi|pramerica|post|porn|politie|poker|pohl|' +\n    'pnc|plus|plumbing|playstation|play|place|pizza|pioneer|pink|ping|pin|pid|pictures|pictet|pics|' +\n    'piaget|physio|photos|photography|photo|phone|philips|pharmacy|pfizer|pet|pccw|pay|passagens|' +\n    'party|parts|partners|pars|paris|panerai|panasonic|pamperedchef|page|ovh|ott|otsuka|osaka|' +\n    'origins|orientexpress|organic|org|orange|oracle|open|ooo|onyourside|online|onl|ong|one|omega|' +\n    'ollo|oldnavy|olayangroup|olayan|okinawa|office|off|observer|obi|nyc|ntt|nrw|nra|nowtv|nowruz|' +\n    'now|norton|northwesternmutual|nokia|nissay|nissan|ninja|nikon|nike|nico|nhk|ngo|nfl|nexus|' +\n    'nextdirect|next|news|newholland|new|neustar|network|netflix|netbank|net|nec|nba|navy|natura|' +\n    'nationwide|name|nagoya|nadex|nab|mutuelle|mutual|museum|mtr|mtpc|mtn|msd|movistar|movie|mov|' +\n    'motorcycles|moto|moscow|mortgage|mormon|mopar|montblanc|monster|money|monash|mom|moi|moe|moda|' +\n    'mobily|mobile|mobi|mma|mls|mlb|mitsubishi|mit|mint|mini|mil|microsoft|miami|metlife|meo|menu|' +\n    'men|memorial|meme|melbourne|meet|media|med|mckinsey|mcdonalds|mcd|mba|mattel|maserati|marshalls|' +\n    'marriott|markets|marketing|market|mango|management|man|makeup|maison|maif|madrid|macys|luxury|' +\n    'luxe|lupin|lundbeck|ltda|ltd|lplfinancial|lpl|love|lotto|lotte|london|lol|loft|locus|locker|' +\n    'loans|loan|lixil|living|live|lipsy|link|linde|lincoln|limo|limited|lilly|like|lighting|' +\n    'lifestyle|lifeinsurance|life|lidl|liaison|lgbt|lexus|lego|legal|lefrak|leclerc|lease|lds|lawyer|' +\n    'law|latrobe|latino|lat|lasalle|lanxess|landrover|land|lancome|lancia|lancaster|lamer|' +\n    'lamborghini|ladbrokes|lacaixa|kyoto|kuokgroup|kred|krd|kpn|kpmg|kosher|komatsu|koeln|kiwi|' +\n    'kitchen|kindle|kinder|kim|kia|kfh|kerryproperties|kerrylogistics|kerryhotels|kddi|kaufen|' +\n    'juniper|juegos|jprs|jpmorgan|joy|jot|joburg|jobs|jnj|jmp|jll|jlc|jio|jewelry|jetzt|jeep|jcp|jcb|' +\n    'java|jaguar|iwc|iveco|itv|itau|istanbul|ist|ismaili|iselect|irish|ipiranga|investments|intuit|' +\n    'international|intel|int|insure|insurance|institute|ink|ing|info|infiniti|industries|immobilien|' +\n    'immo|imdb|imamat|ikano|iinet|ifm|ieee|icu|ice|icbc|ibm|hyundai|hyatt|hughes|htc|hsbc|how|house|' +\n    'hotmail|hoteles|hot|hosting|host|hospital|horse|honeywell|honda|homesense|homes|homegoods|' +\n    'homedepot|holiday|holdings|hockey|hkt|hiv|hitachi|hisamitsu|hiphop|hgtv|hermes|here|helsinki|' +\n    'help|healthcare|health|hdfcbank|hdfc|hbo|haus|hangout|hamburg|hair|guru|guitars|guide|guge|' +\n    'gucci|guardian|group|gripe|green|gratis|graphics|grainger|gov|got|gop|google|goog|goodyear|' +\n    'goodhands|goo|golf|goldpoint|gold|godaddy|gmx|gmo|gmbh|gmail|globo|global|gle|glass|glade|' +\n    'giving|gives|gifts|gift|ggee|george|genting|gent|gea|gdn|gbiz|garden|gap|games|game|gallup|' +\n    'gallo|gallery|gal|fyi|futbol|furniture|fund|fun|fujixerox|fujitsu|ftr|frontier|frontdoor|' +\n    'frogans|frl|fresenius|free|fox|foundation|forum|forsale|forex|ford|football|foodnetwork|food|' +\n    'foo|fly|flsmidth|flowers|florist|flir|flights|flickr|fitness|fit|fishing|fish|firmdale|' +\n    'firestone|fire|financial|finance|final|film|fido|fidelity|fiat|ferrero|ferrari|feedback|fedex|' +\n    'fast|fashion|farmers|farm|fans|fan|family|faith|fairwinds|fail|fage|extraspace|express|exposed|' +\n    'expert|exchange|everbank|events|eus|eurovision|esurance|estate|esq|erni|ericsson|equipment|' +\n    'epson|epost|enterprises|engineering|engineer|energy|emerck|email|education|edu|edeka|eco|eat|' +\n    'earth|dvr|dvag|durban|dupont|duns|dunlop|duck|dubai|dtv|drive|download|dot|doosan|domains|doha|' +\n    'dog|dodge|doctor|docs|dnp|diy|dish|discover|discount|directory|direct|digital|diet|diamonds|dhl|' +\n    'dev|design|desi|dentist|dental|democrat|delta|deloitte|dell|delivery|degree|deals|dealer|deal|' +\n    'dds|dclk|day|datsun|dating|date|data|dance|dad|dabur|cyou|cymru|cuisinella|csc|cruises|cruise|' +\n    'crs|crown|cricket|creditunion|creditcard|credit|courses|coupons|coupon|country|corsica|coop|' +\n    'cool|cookingchannel|cooking|contractors|contact|consulting|construction|condos|comsec|computer|' +\n    'compare|company|community|commbank|comcast|com|cologne|college|coffee|codes|coach|clubmed|club|' +\n    'cloud|clothing|clinique|clinic|click|cleaning|claims|cityeats|city|citic|citi|citadel|cisco|' +\n    'circle|cipriani|church|chrysler|chrome|christmas|chloe|chintai|cheap|chat|chase|channel|chanel|' +\n    'cfd|cfa|cern|ceo|center|ceb|cbs|cbre|cbn|cba|catholic|catering|cat|casino|cash|caseih|case|casa|' +\n    'cartier|cars|careers|career|care|cards|caravan|car|capitalone|capital|capetown|canon|' +\n    'cancerresearch|camp|camera|cam|calvinklein|call|cal|cafe|cab|bzh|buzz|buy|business|builders|' +\n    'build|bugatti|budapest|brussels|brother|broker|broadway|bridgestone|bradesco|box|boutique|bot|' +\n    'boston|bostik|bosch|boots|booking|book|boo|bond|bom|bofa|boehringer|boats|bnpparibas|bnl|bmw|' +\n    'bms|blue|bloomberg|blog|blockbuster|blanco|blackfriday|black|biz|bio|bingo|bing|bike|bid|bible|' +\n    'bharti|bet|bestbuy|best|berlin|bentley|beer|beauty|beats|bcn|bcg|bbva|bbt|bbc|bayern|bauhaus|' +\n    'basketball|baseball|bargains|barefoot|barclays|barclaycard|barcelona|bar|bank|band|' +\n    'bananarepublic|banamex|baidu|baby|azure|axa|aws|avianca|autos|auto|author|auspost|audio|audible|' +\n    'audi|auction|attorney|athleta|associates|asia|asda|arte|art|arpa|army|archi|aramco|aquarelle|' +\n    'apple|app|apartments|aol|anz|anquan|android|analytics|amsterdam|amica|amfam|amex|americanfamily|' +\n    'americanexpress|alstom|alsace|ally|allstate|allfinanz|alipay|alibaba|alfaromeo|akdn|airtel|' +\n    'airforce|airbus|aigo|aig|agency|agakhan|afl|afamilycompany|aetna|aero|aeg|adult|ads|adac|actor|' +\n    'active|aco|accountants|accountant|accenture|academy|abudhabi|abogado|able|abc|abbvie|abbott|abb|' +\n    'abarth|aarp|aaa|onion' +\n')(?=[^0-9a-zA-Z@]|$))'));\n  twttr.txt.regexen.validCCTLD = regexSupplant(RegExp(\n'(?:(?:' +\n    '한국|香港|澳門|新加坡|台灣|台湾|中國|中国|გე|ไทย|ලංකා|ഭാരതം|ಭಾರತ|భారత్|சிங்கப்பூர்|இலங்கை|இந்தியா|ଭାରତ|ભારત|ਭਾਰਤ|' +\n    'ভাৰত|ভারত|বাংলা|भारोत|भारतम्|भारत|ڀارت|پاکستان|مليسيا|مصر|قطر|فلسطين|عمان|عراق|سورية|سودان|تونس|' +\n    'بھارت|بارت|ایران|امارات|المغرب|السعودية|الجزائر|الاردن|հայ|қаз|укр|срб|рф|мон|мкд|ею|бел|бг|ελ|' +\n    'zw|zm|za|yt|ye|ws|wf|vu|vn|vi|vg|ve|vc|va|uz|uy|us|um|uk|ug|ua|tz|tw|tv|tt|tr|tp|to|tn|tm|tl|tk|' +\n    'tj|th|tg|tf|td|tc|sz|sy|sx|sv|su|st|ss|sr|so|sn|sm|sl|sk|sj|si|sh|sg|se|sd|sc|sb|sa|rw|ru|rs|ro|' +\n    're|qa|py|pw|pt|ps|pr|pn|pm|pl|pk|ph|pg|pf|pe|pa|om|nz|nu|nr|np|no|nl|ni|ng|nf|ne|nc|na|mz|my|mx|' +\n    'mw|mv|mu|mt|ms|mr|mq|mp|mo|mn|mm|ml|mk|mh|mg|mf|me|md|mc|ma|ly|lv|lu|lt|ls|lr|lk|li|lc|lb|la|kz|' +\n    'ky|kw|kr|kp|kn|km|ki|kh|kg|ke|jp|jo|jm|je|it|is|ir|iq|io|in|im|il|ie|id|hu|ht|hr|hn|hm|hk|gy|gw|' +\n    'gu|gt|gs|gr|gq|gp|gn|gm|gl|gi|gh|gg|gf|ge|gd|gb|ga|fr|fo|fm|fk|fj|fi|eu|et|es|er|eh|eg|ee|ec|dz|' +\n    'do|dm|dk|dj|de|cz|cy|cx|cw|cv|cu|cr|co|cn|cm|cl|ck|ci|ch|cg|cf|cd|cc|ca|bz|by|bw|bv|bt|bs|br|bq|' +\n    'bo|bn|bm|bl|bj|bi|bh|bg|bf|be|bd|bb|ba|az|ax|aw|au|at|as|ar|aq|ao|an|am|al|ai|ag|af|ae|ad|ac' +\n')(?=[^0-9a-zA-Z@]|$))'));\n  twttr.txt.regexen.validPunycode = /(?:xn--[0-9a-z]+)/;\n  twttr.txt.regexen.validSpecialCCTLD = /(?:(?:co|tv)(?=[^0-9a-zA-Z@]|$))/;\n  twttr.txt.regexen.validDomain = regexSupplant(/(?:#{validSubdomain}*#{validDomainName}(?:#{validGTLD}|#{validCCTLD}|#{validPunycode}))/);\n  twttr.txt.regexen.validAsciiDomain = regexSupplant(/(?:(?:[\\-a-z0-9#{latinAccentChars}]+)\\.)+(?:#{validGTLD}|#{validCCTLD}|#{validPunycode})/gi);\n  twttr.txt.regexen.invalidShortDomain = regexSupplant(/^#{validDomainName}#{validCCTLD}$/i);\n  twttr.txt.regexen.validSpecialShortDomain = regexSupplant(/^#{validDomainName}#{validSpecialCCTLD}$/i);\n  twttr.txt.regexen.validPortNumber = /[0-9]+/;\n  twttr.txt.regexen.cyrillicLettersAndMarks = /\\u0400-\\u04FF/;\n  twttr.txt.regexen.validGeneralUrlPathChars = regexSupplant(/[a-z#{cyrillicLettersAndMarks}0-9!\\*';:=\\+,\\.\\$\\/%#\\[\\]\\-_~@\\|&#{latinAccentChars}]/i);\n  // Allow URL paths to contain up to two nested levels of balanced parens\n  //  1. Used in Wikipedia URLs like /Primer_(film)\n  //  2. Used in IIS sessions like /S(dfd346)/\n  //  3. Used in Rdio URLs like /track/We_Up_(Album_Version_(Edited))/\n  twttr.txt.regexen.validUrlBalancedParens = regexSupplant(\n    '\\\\('                                   +\n      '(?:'                                 +\n        '#{validGeneralUrlPathChars}+'      +\n        '|'                                 +\n        // allow one nested level of balanced parentheses\n        '(?:'                               +\n          '#{validGeneralUrlPathChars}*'    +\n          '\\\\('                             +\n            '#{validGeneralUrlPathChars}+'  +\n          '\\\\)'                             +\n          '#{validGeneralUrlPathChars}*'    +\n        ')'                                 +\n      ')'                                   +\n    '\\\\)'\n  , 'i');\n  // Valid end-of-path chracters (so /foo. does not gobble the period).\n  // 1. Allow =&# for empty URL parameters and other URL-join artifacts\n  twttr.txt.regexen.validUrlPathEndingChars = regexSupplant(/[\\+\\-a-z#{cyrillicLettersAndMarks}0-9=_#\\/#{latinAccentChars}]|(?:#{validUrlBalancedParens})/i);\n  // Allow @ in a url, but only in the middle. Catch things like http://example.com/@user/\n  twttr.txt.regexen.validUrlPath = regexSupplant('(?:' +\n    '(?:' +\n      '#{validGeneralUrlPathChars}*' +\n        '(?:#{validUrlBalancedParens}#{validGeneralUrlPathChars}*)*' +\n        '#{validUrlPathEndingChars}'+\n      ')|(?:@#{validGeneralUrlPathChars}+\\/)'+\n    ')', 'i');\n\n  twttr.txt.regexen.validUrlQueryChars = /[a-z0-9!?\\*'@\\(\\);:&=\\+\\$\\/%#\\[\\]\\-_\\.,~|]/i;\n  twttr.txt.regexen.validUrlQueryEndingChars = /[a-z0-9_&=#\\/]/i;\n  twttr.txt.regexen.extractUrl = regexSupplant(\n    '('                                                            + // $1 total match\n      '(#{validUrlPrecedingChars})'                                + // $2 Preceeding chracter\n      '('                                                          + // $3 URL\n        '(https?:\\\\/\\\\/)?'                                         + // $4 Protocol (optional)\n        '(#{validDomain})'                                         + // $5 Domain(s)\n        '(?::(#{validPortNumber}))?'                               + // $6 Port number (optional)\n        '(\\\\/#{validUrlPath}*)?'                                   + // $7 URL Path\n        '(\\\\?#{validUrlQueryChars}*#{validUrlQueryEndingChars})?'  + // $8 Query String\n      ')'                                                          +\n    ')'\n  , 'gi');\n\n  twttr.txt.regexen.validTcoUrl = /^https?:\\/\\/t\\.co\\/[a-z0-9]+/i;\n  twttr.txt.regexen.urlHasProtocol = /^https?:\\/\\//i;\n  twttr.txt.regexen.urlHasHttps = /^https:\\/\\//i;\n\n  // cashtag related regex\n  twttr.txt.regexen.cashtag = /[a-z]{1,6}(?:[._][a-z]{1,2})?/i;\n  twttr.txt.regexen.validCashtag = regexSupplant('(^|#{spaces})(\\\\$)(#{cashtag})(?=$|\\\\s|[#{punct}])', 'gi');\n\n  // These URL validation pattern strings are based on the ABNF from RFC 3986\n  twttr.txt.regexen.validateUrlUnreserved = /[a-z\\u0400-\\u04FF0-9\\-._~]/i;\n  twttr.txt.regexen.validateUrlPctEncoded = /(?:%[0-9a-f]{2})/i;\n  twttr.txt.regexen.validateUrlSubDelims = /[!$&'()*+,;=]/i;\n  twttr.txt.regexen.validateUrlPchar = regexSupplant('(?:' +\n    '#{validateUrlUnreserved}|' +\n    '#{validateUrlPctEncoded}|' +\n    '#{validateUrlSubDelims}|' +\n    '[:|@]' +\n  ')', 'i');\n\n  twttr.txt.regexen.validateUrlScheme = /(?:[a-z][a-z0-9+\\-.]*)/i;\n  twttr.txt.regexen.validateUrlUserinfo = regexSupplant('(?:' +\n    '#{validateUrlUnreserved}|' +\n    '#{validateUrlPctEncoded}|' +\n    '#{validateUrlSubDelims}|' +\n    ':' +\n  ')*', 'i');\n\n  twttr.txt.regexen.validateUrlDecOctet = /(?:[0-9]|(?:[1-9][0-9])|(?:1[0-9]{2})|(?:2[0-4][0-9])|(?:25[0-5]))/i;\n  twttr.txt.regexen.validateUrlIpv4 = regexSupplant(/(?:#{validateUrlDecOctet}(?:\\.#{validateUrlDecOctet}){3})/i);\n\n  // Punting on real IPv6 validation for now\n  twttr.txt.regexen.validateUrlIpv6 = /(?:\\[[a-f0-9:\\.]+\\])/i;\n\n  // Also punting on IPvFuture for now\n  twttr.txt.regexen.validateUrlIp = regexSupplant('(?:' +\n    '#{validateUrlIpv4}|' +\n    '#{validateUrlIpv6}' +\n  ')', 'i');\n\n  // This is more strict than the rfc specifies\n  twttr.txt.regexen.validateUrlSubDomainSegment = /(?:[a-z0-9](?:[a-z0-9_\\-]*[a-z0-9])?)/i;\n  twttr.txt.regexen.validateUrlDomainSegment = /(?:[a-z0-9](?:[a-z0-9\\-]*[a-z0-9])?)/i;\n  twttr.txt.regexen.validateUrlDomainTld = /(?:[a-z](?:[a-z0-9\\-]*[a-z0-9])?)/i;\n  twttr.txt.regexen.validateUrlDomain = regexSupplant(/(?:(?:#{validateUrlSubDomainSegment}\\.)*(?:#{validateUrlDomainSegment}\\.)#{validateUrlDomainTld})/i);\n\n  twttr.txt.regexen.validateUrlHost = regexSupplant('(?:' +\n    '#{validateUrlIp}|' +\n    '#{validateUrlDomain}' +\n  ')', 'i');\n\n  // Unencoded internationalized domains - this doesn't check for invalid UTF-8 sequences\n  twttr.txt.regexen.validateUrlUnicodeSubDomainSegment = /(?:(?:[a-z0-9]|[^\\u0000-\\u007f])(?:(?:[a-z0-9_\\-]|[^\\u0000-\\u007f])*(?:[a-z0-9]|[^\\u0000-\\u007f]))?)/i;\n  twttr.txt.regexen.validateUrlUnicodeDomainSegment = /(?:(?:[a-z0-9]|[^\\u0000-\\u007f])(?:(?:[a-z0-9\\-]|[^\\u0000-\\u007f])*(?:[a-z0-9]|[^\\u0000-\\u007f]))?)/i;\n  twttr.txt.regexen.validateUrlUnicodeDomainTld = /(?:(?:[a-z]|[^\\u0000-\\u007f])(?:(?:[a-z0-9\\-]|[^\\u0000-\\u007f])*(?:[a-z0-9]|[^\\u0000-\\u007f]))?)/i;\n  twttr.txt.regexen.validateUrlUnicodeDomain = regexSupplant(/(?:(?:#{validateUrlUnicodeSubDomainSegment}\\.)*(?:#{validateUrlUnicodeDomainSegment}\\.)#{validateUrlUnicodeDomainTld})/i);\n\n  twttr.txt.regexen.validateUrlUnicodeHost = regexSupplant('(?:' +\n    '#{validateUrlIp}|' +\n    '#{validateUrlUnicodeDomain}' +\n  ')', 'i');\n\n  twttr.txt.regexen.validateUrlPort = /[0-9]{1,5}/;\n\n  twttr.txt.regexen.validateUrlUnicodeAuthority = regexSupplant(\n    '(?:(#{validateUrlUserinfo})@)?'  + // $1 userinfo\n    '(#{validateUrlUnicodeHost})'     + // $2 host\n    '(?::(#{validateUrlPort}))?'        //$3 port\n  , \"i\");\n\n  twttr.txt.regexen.validateUrlAuthority = regexSupplant(\n    '(?:(#{validateUrlUserinfo})@)?' + // $1 userinfo\n    '(#{validateUrlHost})'           + // $2 host\n    '(?::(#{validateUrlPort}))?'       // $3 port\n  , \"i\");\n\n  twttr.txt.regexen.validateUrlPath = regexSupplant(/(\\/#{validateUrlPchar}*)*/i);\n  twttr.txt.regexen.validateUrlQuery = regexSupplant(/(#{validateUrlPchar}|\\/|\\?)*/i);\n  twttr.txt.regexen.validateUrlFragment = regexSupplant(/(#{validateUrlPchar}|\\/|\\?)*/i);\n\n  // Modified version of RFC 3986 Appendix B\n  twttr.txt.regexen.validateUrlUnencoded = regexSupplant(\n    '^'                               + // Full URL\n    '(?:'                             +\n      '([^:/?#]+):\\\\/\\\\/'             + // $1 Scheme\n    ')?'                              +\n    '([^/?#]*)'                       + // $2 Authority\n    '([^?#]*)'                        + // $3 Path\n    '(?:'                             +\n      '\\\\?([^#]*)'                    + // $4 Query\n    ')?'                              +\n    '(?:'                             +\n      '#(.*)'                         + // $5 Fragment\n    ')?$'\n  , \"i\");\n\n\n  // Default CSS class for auto-linked lists (along with the url class)\n  var DEFAULT_LIST_CLASS = \"tweet-url list-slug\";\n  // Default CSS class for auto-linked usernames (along with the url class)\n  var DEFAULT_USERNAME_CLASS = \"tweet-url username\";\n  // Default CSS class for auto-linked hashtags (along with the url class)\n  var DEFAULT_HASHTAG_CLASS = \"tweet-url hashtag\";\n  // Default CSS class for auto-linked cashtags (along with the url class)\n  var DEFAULT_CASHTAG_CLASS = \"tweet-url cashtag\";\n  // Options which should not be passed as HTML attributes\n  var OPTIONS_NOT_ATTRIBUTES = {'urlClass':true, 'listClass':true, 'usernameClass':true, 'hashtagClass':true, 'cashtagClass':true,\n                            'usernameUrlBase':true, 'listUrlBase':true, 'hashtagUrlBase':true, 'cashtagUrlBase':true,\n                            'usernameUrlBlock':true, 'listUrlBlock':true, 'hashtagUrlBlock':true, 'linkUrlBlock':true,\n                            'usernameIncludeSymbol':true, 'suppressLists':true, 'suppressNoFollow':true, 'targetBlank':true,\n                            'suppressDataScreenName':true, 'urlEntities':true, 'symbolTag':true, 'textWithSymbolTag':true, 'urlTarget':true,\n                            'invisibleTagAttrs':true, 'linkAttributeBlock':true, 'linkTextBlock': true, 'htmlEscapeNonEntities': true\n                            };\n\n  var BOOLEAN_ATTRIBUTES = {'disabled':true, 'readonly':true, 'multiple':true, 'checked':true};\n\n  // Simple object cloning function for simple objects\n  function clone(o) {\n    var r = {};\n    for (var k in o) {\n      if (o.hasOwnProperty(k)) {\n        r[k] = o[k];\n      }\n    }\n\n    return r;\n  }\n\n  twttr.txt.tagAttrs = function(attributes) {\n    var htmlAttrs = \"\";\n    for (var k in attributes) {\n      var v = attributes[k];\n      if (BOOLEAN_ATTRIBUTES[k]) {\n        v = v ? k : null;\n      }\n      if (v == null) continue;\n      htmlAttrs += \" \" + twttr.txt.htmlEscape(k) + \"=\\\"\" + twttr.txt.htmlEscape(v.toString()) + \"\\\"\";\n    }\n    return htmlAttrs;\n  };\n\n  twttr.txt.linkToText = function(entity, text, attributes, options) {\n    if (!options.suppressNoFollow) {\n      attributes.rel = \"nofollow\";\n    }\n    // if linkAttributeBlock is specified, call it to modify the attributes\n    if (options.linkAttributeBlock) {\n      options.linkAttributeBlock(entity, attributes);\n    }\n    // if linkTextBlock is specified, call it to get a new/modified link text\n    if (options.linkTextBlock) {\n      text = options.linkTextBlock(entity, text);\n    }\n    var d = {\n      text: text,\n      attr: twttr.txt.tagAttrs(attributes)\n    };\n    return stringSupplant(\"<a#{attr}>#{text}</a>\", d);\n  };\n\n  twttr.txt.linkToTextWithSymbol = function(entity, symbol, text, attributes, options) {\n    var taggedSymbol = options.symbolTag ? \"<\" + options.symbolTag + \">\" + symbol + \"</\"+ options.symbolTag + \">\" : symbol;\n    text = twttr.txt.htmlEscape(text);\n    var taggedText = options.textWithSymbolTag ? \"<\" + options.textWithSymbolTag + \">\" + text + \"</\"+ options.textWithSymbolTag + \">\" : text;\n\n    if (options.usernameIncludeSymbol || !symbol.match(twttr.txt.regexen.atSigns)) {\n      return twttr.txt.linkToText(entity, taggedSymbol + taggedText, attributes, options);\n    } else {\n      return taggedSymbol + twttr.txt.linkToText(entity, taggedText, attributes, options);\n    }\n  };\n\n  twttr.txt.linkToHashtag = function(entity, text, options) {\n    var hash = text.substring(entity.indices[0], entity.indices[0] + 1);\n    var hashtag = twttr.txt.htmlEscape(entity.hashtag);\n    var attrs = clone(options.htmlAttrs || {});\n    attrs.href = options.hashtagUrlBase + hashtag;\n    attrs.title = \"#\" + hashtag;\n    attrs[\"class\"] = options.hashtagClass;\n    if (hashtag.charAt(0).match(twttr.txt.regexen.rtl_chars)){\n      attrs[\"class\"] += \" rtl\";\n    }\n    if (options.targetBlank) {\n      attrs.target = '_blank';\n    }\n\n    return twttr.txt.linkToTextWithSymbol(entity, hash, hashtag, attrs, options);\n  };\n\n  twttr.txt.linkToCashtag = function(entity, text, options) {\n    var cashtag = twttr.txt.htmlEscape(entity.cashtag);\n    var attrs = clone(options.htmlAttrs || {});\n    attrs.href = options.cashtagUrlBase + cashtag;\n    attrs.title = \"$\" + cashtag;\n    attrs[\"class\"] =  options.cashtagClass;\n    if (options.targetBlank) {\n      attrs.target = '_blank';\n    }\n\n    return twttr.txt.linkToTextWithSymbol(entity, \"$\", cashtag, attrs, options);\n  };\n\n  twttr.txt.linkToMentionAndList = function(entity, text, options) {\n    var at = text.substring(entity.indices[0], entity.indices[0] + 1);\n    var user = twttr.txt.htmlEscape(entity.screenName);\n    var slashListname = twttr.txt.htmlEscape(entity.listSlug);\n    var isList = entity.listSlug && !options.suppressLists;\n    var attrs = clone(options.htmlAttrs || {});\n    attrs[\"class\"] = (isList ? options.listClass : options.usernameClass);\n    attrs.href = isList ? options.listUrlBase + user + slashListname : options.usernameUrlBase + user;\n    if (!isList && !options.suppressDataScreenName) {\n      attrs['data-screen-name'] = user;\n    }\n    if (options.targetBlank) {\n      attrs.target = '_blank';\n    }\n\n    return twttr.txt.linkToTextWithSymbol(entity, at, isList ? user + slashListname : user, attrs, options);\n  };\n\n  twttr.txt.linkToUrl = function(entity, text, options) {\n    var url = entity.url;\n    var displayUrl = url;\n    var linkText = twttr.txt.htmlEscape(displayUrl);\n\n    // If the caller passed a urlEntities object (provided by a Twitter API\n    // response with include_entities=true), we use that to render the display_url\n    // for each URL instead of it's underlying t.co URL.\n    var urlEntity = (options.urlEntities && options.urlEntities[url]) || entity;\n    if (urlEntity.display_url) {\n      linkText = twttr.txt.linkTextWithEntity(urlEntity, options);\n    }\n\n    var attrs = clone(options.htmlAttrs || {});\n\n    if (!url.match(twttr.txt.regexen.urlHasProtocol)) {\n      url = \"http://\" + url;\n    }\n    attrs.href = url;\n\n    if (options.targetBlank) {\n      attrs.target = '_blank';\n    }\n\n    // set class only if urlClass is specified.\n    if (options.urlClass) {\n      attrs[\"class\"] = options.urlClass;\n    }\n\n    // set target only if urlTarget is specified.\n    if (options.urlTarget) {\n      attrs.target = options.urlTarget;\n    }\n\n    if (!options.title && urlEntity.display_url) {\n      attrs.title = urlEntity.expanded_url;\n    }\n\n    return twttr.txt.linkToText(entity, linkText, attrs, options);\n  };\n\n  twttr.txt.linkTextWithEntity = function (entity, options) {\n    var displayUrl = entity.display_url;\n    var expandedUrl = entity.expanded_url;\n\n    // Goal: If a user copies and pastes a tweet containing t.co'ed link, the resulting paste\n    // should contain the full original URL (expanded_url), not the display URL.\n    //\n    // Method: Whenever possible, we actually emit HTML that contains expanded_url, and use\n    // font-size:0 to hide those parts that should not be displayed (because they are not part of display_url).\n    // Elements with font-size:0 get copied even though they are not visible.\n    // Note that display:none doesn't work here. Elements with display:none don't get copied.\n    //\n    // Additionally, we want to *display* ellipses, but we don't want them copied.  To make this happen we\n    // wrap the ellipses in a tco-ellipsis class and provide an onCopy handler that sets display:none on\n    // everything with the tco-ellipsis class.\n    //\n    // Exception: pic.twitter.com images, for which expandedUrl = \"https://twitter.com/#!/username/status/1234/photo/1\n    // For those URLs, display_url is not a substring of expanded_url, so we don't do anything special to render the elided parts.\n    // For a pic.twitter.com URL, the only elided part will be the \"https://\", so this is fine.\n\n    var displayUrlSansEllipses = displayUrl.replace(/…/g, \"\"); // We have to disregard ellipses for matching\n    // Note: we currently only support eliding parts of the URL at the beginning or the end.\n    // Eventually we may want to elide parts of the URL in the *middle*.  If so, this code will\n    // become more complicated.  We will probably want to create a regexp out of display URL,\n    // replacing every ellipsis with a \".*\".\n    if (expandedUrl.indexOf(displayUrlSansEllipses) != -1) {\n      var displayUrlIndex = expandedUrl.indexOf(displayUrlSansEllipses);\n      var v = {\n        displayUrlSansEllipses: displayUrlSansEllipses,\n        // Portion of expandedUrl that precedes the displayUrl substring\n        beforeDisplayUrl: expandedUrl.substr(0, displayUrlIndex),\n        // Portion of expandedUrl that comes after displayUrl\n        afterDisplayUrl: expandedUrl.substr(displayUrlIndex + displayUrlSansEllipses.length),\n        precedingEllipsis: displayUrl.match(/^…/) ? \"…\" : \"\",\n        followingEllipsis: displayUrl.match(/…$/) ? \"…\" : \"\"\n      };\n      for (var k in v) {\n        if (v.hasOwnProperty(k)) {\n          v[k] = twttr.txt.htmlEscape(v[k]);\n        }\n      }\n      // As an example: The user tweets \"hi http://longdomainname.com/foo\"\n      // This gets shortened to \"hi http://t.co/xyzabc\", with display_url = \"…nname.com/foo\"\n      // This will get rendered as:\n      // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n      //   …\n      //   <!-- There's a chance the onCopy event handler might not fire. In case that happens,\n      //        we include an &nbsp; here so that the … doesn't bump up against the URL and ruin it.\n      //        The &nbsp; is inside the tco-ellipsis span so that when the onCopy handler *does*\n      //        fire, it doesn't get copied.  Otherwise the copied text would have two spaces in a row,\n      //        e.g. \"hi  http://longdomainname.com/foo\".\n      //   <span style='font-size:0'>&nbsp;</span>\n      // </span>\n      // <span style='font-size:0'>  <!-- This stuff should get copied but not displayed -->\n      //   http://longdomai\n      // </span>\n      // <span class='js-display-url'> <!-- This stuff should get displayed *and* copied -->\n      //   nname.com/foo\n      // </span>\n      // <span class='tco-ellipsis'> <!-- This stuff should get displayed but not copied -->\n      //   <span style='font-size:0'>&nbsp;</span>\n      //   …\n      // </span>\n      v['invisible'] = options.invisibleTagAttrs;\n      return stringSupplant(\"<span class='tco-ellipsis'>#{precedingEllipsis}<span #{invisible}>&nbsp;</span></span><span #{invisible}>#{beforeDisplayUrl}</span><span class='js-display-url'>#{displayUrlSansEllipses}</span><span #{invisible}>#{afterDisplayUrl}</span><span class='tco-ellipsis'><span #{invisible}>&nbsp;</span>#{followingEllipsis}</span>\", v);\n    }\n    return displayUrl;\n  };\n\n  twttr.txt.autoLinkEntities = function(text, entities, options) {\n    options = clone(options || {});\n\n    options.hashtagClass = options.hashtagClass || DEFAULT_HASHTAG_CLASS;\n    options.hashtagUrlBase = options.hashtagUrlBase || \"https://twitter.com/#!/search?q=%23\";\n    options.cashtagClass = options.cashtagClass || DEFAULT_CASHTAG_CLASS;\n    options.cashtagUrlBase = options.cashtagUrlBase || \"https://twitter.com/#!/search?q=%24\";\n    options.listClass = options.listClass || DEFAULT_LIST_CLASS;\n    options.usernameClass = options.usernameClass || DEFAULT_USERNAME_CLASS;\n    options.usernameUrlBase = options.usernameUrlBase || \"https://twitter.com/\";\n    options.listUrlBase = options.listUrlBase || \"https://twitter.com/\";\n    options.htmlAttrs = twttr.txt.extractHtmlAttrsFromOptions(options);\n    options.invisibleTagAttrs = options.invisibleTagAttrs || \"style='position:absolute;left:-9999px;'\";\n\n    // remap url entities to hash\n    var urlEntities, i, len;\n    if(options.urlEntities) {\n      urlEntities = {};\n      for(i = 0, len = options.urlEntities.length; i < len; i++) {\n        urlEntities[options.urlEntities[i].url] = options.urlEntities[i];\n      }\n      options.urlEntities = urlEntities;\n    }\n\n    var result = \"\";\n    var beginIndex = 0;\n\n    // sort entities by start index\n    entities.sort(function(a,b){ return a.indices[0] - b.indices[0]; });\n\n    var nonEntity = options.htmlEscapeNonEntities ? twttr.txt.htmlEscape : function(text) {\n      return text;\n    };\n\n    for (var i = 0; i < entities.length; i++) {\n      var entity = entities[i];\n      result += nonEntity(text.substring(beginIndex, entity.indices[0]));\n\n      if (entity.url) {\n        result += twttr.txt.linkToUrl(entity, text, options);\n      } else if (entity.hashtag) {\n        result += twttr.txt.linkToHashtag(entity, text, options);\n      } else if (entity.screenName) {\n        result += twttr.txt.linkToMentionAndList(entity, text, options);\n      } else if (entity.cashtag) {\n        result += twttr.txt.linkToCashtag(entity, text, options);\n      }\n      beginIndex = entity.indices[1];\n    }\n    result += nonEntity(text.substring(beginIndex, text.length));\n    return result;\n  };\n\n  twttr.txt.autoLinkWithJSON = function(text, json, options) {\n    // map JSON entity to twitter-text entity\n    if (json.user_mentions) {\n      for (var i = 0; i < json.user_mentions.length; i++) {\n        // this is a @mention\n        json.user_mentions[i].screenName = json.user_mentions[i].screen_name;\n      }\n    }\n\n    if (json.hashtags) {\n      for (var i = 0; i < json.hashtags.length; i++) {\n        // this is a #hashtag\n        json.hashtags[i].hashtag = json.hashtags[i].text;\n      }\n    }\n\n    if (json.symbols) {\n      for (var i = 0; i < json.symbols.length; i++) {\n        // this is a $CASH tag\n        json.symbols[i].cashtag = json.symbols[i].text;\n      }\n    }\n\n    // concatenate all entities\n    var entities = [];\n    for (var key in json) {\n      entities = entities.concat(json[key]);\n    }\n\n    // modify indices to UTF-16\n    twttr.txt.modifyIndicesFromUnicodeToUTF16(text, entities);\n\n    return twttr.txt.autoLinkEntities(text, entities, options);\n  };\n\n  twttr.txt.extractHtmlAttrsFromOptions = function(options) {\n    var htmlAttrs = {};\n    for (var k in options) {\n      var v = options[k];\n      if (OPTIONS_NOT_ATTRIBUTES[k]) continue;\n      if (BOOLEAN_ATTRIBUTES[k]) {\n        v = v ? k : null;\n      }\n      if (v == null) continue;\n      htmlAttrs[k] = v;\n    }\n    return htmlAttrs;\n  };\n\n  twttr.txt.autoLink = function(text, options) {\n    var entities = twttr.txt.extractEntitiesWithIndices(text, {extractUrlsWithoutProtocol: false});\n    return twttr.txt.autoLinkEntities(text, entities, options);\n  };\n\n  twttr.txt.autoLinkUsernamesOrLists = function(text, options) {\n    var entities = twttr.txt.extractMentionsOrListsWithIndices(text);\n    return twttr.txt.autoLinkEntities(text, entities, options);\n  };\n\n  twttr.txt.autoLinkHashtags = function(text, options) {\n    var entities = twttr.txt.extractHashtagsWithIndices(text);\n    return twttr.txt.autoLinkEntities(text, entities, options);\n  };\n\n  twttr.txt.autoLinkCashtags = function(text, options) {\n    var entities = twttr.txt.extractCashtagsWithIndices(text);\n    return twttr.txt.autoLinkEntities(text, entities, options);\n  };\n\n  twttr.txt.autoLinkUrlsCustom = function(text, options) {\n    var entities = twttr.txt.extractUrlsWithIndices(text, {extractUrlsWithoutProtocol: false});\n    return twttr.txt.autoLinkEntities(text, entities, options);\n  };\n\n  twttr.txt.removeOverlappingEntities = function(entities) {\n    entities.sort(function(a,b){ return a.indices[0] - b.indices[0]; });\n\n    var prev = entities[0];\n    for (var i = 1; i < entities.length; i++) {\n      if (prev.indices[1] > entities[i].indices[0]) {\n        entities.splice(i, 1);\n        i--;\n      } else {\n        prev = entities[i];\n      }\n    }\n  };\n\n  twttr.txt.extractEntitiesWithIndices = function(text, options) {\n    var entities = twttr.txt.extractUrlsWithIndices(text, options)\n                    .concat(twttr.txt.extractMentionsOrListsWithIndices(text))\n                    .concat(twttr.txt.extractHashtagsWithIndices(text, {checkUrlOverlap: false}))\n                    .concat(twttr.txt.extractCashtagsWithIndices(text));\n\n    if (entities.length == 0) {\n      return [];\n    }\n\n    twttr.txt.removeOverlappingEntities(entities);\n    return entities;\n  };\n\n  twttr.txt.extractMentions = function(text) {\n    var screenNamesOnly = [],\n        screenNamesWithIndices = twttr.txt.extractMentionsWithIndices(text);\n\n    for (var i = 0; i < screenNamesWithIndices.length; i++) {\n      var screenName = screenNamesWithIndices[i].screenName;\n      screenNamesOnly.push(screenName);\n    }\n\n    return screenNamesOnly;\n  };\n\n  twttr.txt.extractMentionsWithIndices = function(text) {\n    var mentions = [],\n        mentionOrList,\n        mentionsOrLists = twttr.txt.extractMentionsOrListsWithIndices(text);\n\n    for (var i = 0 ; i < mentionsOrLists.length; i++) {\n      mentionOrList = mentionsOrLists[i];\n      if (mentionOrList.listSlug == '') {\n        mentions.push({\n          screenName: mentionOrList.screenName,\n          indices: mentionOrList.indices\n        });\n      }\n    }\n\n    return mentions;\n  };\n\n  /**\n   * Extract list or user mentions.\n   * (Presence of listSlug indicates a list)\n   */\n  twttr.txt.extractMentionsOrListsWithIndices = function(text) {\n    if (!text || !text.match(twttr.txt.regexen.atSigns)) {\n      return [];\n    }\n\n    var possibleNames = [],\n        slashListname;\n\n    text.replace(twttr.txt.regexen.validMentionOrList, function(match, before, atSign, screenName, slashListname, offset, chunk) {\n      var after = chunk.slice(offset + match.length);\n      if (!after.match(twttr.txt.regexen.endMentionMatch)) {\n        slashListname = slashListname || '';\n        var startPosition = offset + before.length;\n        var endPosition = startPosition + screenName.length + slashListname.length + 1;\n        possibleNames.push({\n          screenName: screenName,\n          listSlug: slashListname,\n          indices: [startPosition, endPosition]\n        });\n      }\n    });\n\n    return possibleNames;\n  };\n\n\n  twttr.txt.extractReplies = function(text) {\n    if (!text) {\n      return null;\n    }\n\n    var possibleScreenName = text.match(twttr.txt.regexen.validReply);\n    if (!possibleScreenName ||\n        RegExp.rightContext.match(twttr.txt.regexen.endMentionMatch)) {\n      return null;\n    }\n\n    return possibleScreenName[1];\n  };\n\n  twttr.txt.extractUrls = function(text, options) {\n    var urlsOnly = [],\n        urlsWithIndices = twttr.txt.extractUrlsWithIndices(text, options);\n\n    for (var i = 0; i < urlsWithIndices.length; i++) {\n      urlsOnly.push(urlsWithIndices[i].url);\n    }\n\n    return urlsOnly;\n  };\n\n  twttr.txt.extractUrlsWithIndices = function(text, options) {\n    if (!options) {\n      options = {extractUrlsWithoutProtocol: true};\n    }\n    if (!text || (options.extractUrlsWithoutProtocol ? !text.match(/\\./) : !text.match(/:/))) {\n      return [];\n    }\n\n    var urls = [];\n\n    while (twttr.txt.regexen.extractUrl.exec(text)) {\n      var before = RegExp.$2, url = RegExp.$3, protocol = RegExp.$4, domain = RegExp.$5, path = RegExp.$7;\n      var endPosition = twttr.txt.regexen.extractUrl.lastIndex,\n          startPosition = endPosition - url.length;\n\n      // if protocol is missing and domain contains non-ASCII characters,\n      // extract ASCII-only domains.\n      if (!protocol) {\n        if (!options.extractUrlsWithoutProtocol\n            || before.match(twttr.txt.regexen.invalidUrlWithoutProtocolPrecedingChars)) {\n          continue;\n        }\n        var lastUrl = null,\n            asciiEndPosition = 0;\n        domain.replace(twttr.txt.regexen.validAsciiDomain, function(asciiDomain) {\n          var asciiStartPosition = domain.indexOf(asciiDomain, asciiEndPosition);\n          asciiEndPosition = asciiStartPosition + asciiDomain.length;\n          lastUrl = {\n            url: asciiDomain,\n            indices: [startPosition + asciiStartPosition, startPosition + asciiEndPosition]\n          };\n          if (path\n              || asciiDomain.match(twttr.txt.regexen.validSpecialShortDomain)\n              || !asciiDomain.match(twttr.txt.regexen.invalidShortDomain)) {\n            urls.push(lastUrl);\n          }\n        });\n\n        // no ASCII-only domain found. Skip the entire URL.\n        if (lastUrl == null) {\n          continue;\n        }\n\n        // lastUrl only contains domain. Need to add path and query if they exist.\n        if (path) {\n          lastUrl.url = url.replace(domain, lastUrl.url);\n          lastUrl.indices[1] = endPosition;\n        }\n      } else {\n        // In the case of t.co URLs, don't allow additional path characters.\n        if (url.match(twttr.txt.regexen.validTcoUrl)) {\n          url = RegExp.lastMatch;\n          endPosition = startPosition + url.length;\n        }\n        urls.push({\n          url: url,\n          indices: [startPosition, endPosition]\n        });\n      }\n    }\n\n    return urls;\n  };\n\n  twttr.txt.extractHashtags = function(text) {\n    var hashtagsOnly = [],\n        hashtagsWithIndices = twttr.txt.extractHashtagsWithIndices(text);\n\n    for (var i = 0; i < hashtagsWithIndices.length; i++) {\n      hashtagsOnly.push(hashtagsWithIndices[i].hashtag);\n    }\n\n    return hashtagsOnly;\n  };\n\n  twttr.txt.extractHashtagsWithIndices = function(text, options) {\n    if (!options) {\n      options = {checkUrlOverlap: true};\n    }\n\n    if (!text || !text.match(twttr.txt.regexen.hashSigns)) {\n      return [];\n    }\n\n    var tags = [];\n\n    text.replace(twttr.txt.regexen.validHashtag, function(match, before, hash, hashText, offset, chunk) {\n      var after = chunk.slice(offset + match.length);\n      if (after.match(twttr.txt.regexen.endHashtagMatch))\n        return;\n      var startPosition = offset + before.length;\n      var endPosition = startPosition + hashText.length + 1;\n      tags.push({\n        hashtag: hashText,\n        indices: [startPosition, endPosition]\n      });\n    });\n\n    if (options.checkUrlOverlap) {\n      // also extract URL entities\n      var urls = twttr.txt.extractUrlsWithIndices(text);\n      if (urls.length > 0) {\n        var entities = tags.concat(urls);\n        // remove overlap\n        twttr.txt.removeOverlappingEntities(entities);\n        // only push back hashtags\n        tags = [];\n        for (var i = 0; i < entities.length; i++) {\n          if (entities[i].hashtag) {\n            tags.push(entities[i]);\n          }\n        }\n      }\n    }\n\n    return tags;\n  };\n\n  twttr.txt.extractCashtags = function(text) {\n    var cashtagsOnly = [],\n        cashtagsWithIndices = twttr.txt.extractCashtagsWithIndices(text);\n\n    for (var i = 0; i < cashtagsWithIndices.length; i++) {\n      cashtagsOnly.push(cashtagsWithIndices[i].cashtag);\n    }\n\n    return cashtagsOnly;\n  };\n\n  twttr.txt.extractCashtagsWithIndices = function(text) {\n    if (!text || text.indexOf(\"$\") == -1) {\n      return [];\n    }\n\n    var tags = [];\n\n    text.replace(twttr.txt.regexen.validCashtag, function(match, before, dollar, cashtag, offset, chunk) {\n      var startPosition = offset + before.length;\n      var endPosition = startPosition + cashtag.length + 1;\n      tags.push({\n        cashtag: cashtag,\n        indices: [startPosition, endPosition]\n      });\n    });\n\n    return tags;\n  };\n\n  twttr.txt.modifyIndicesFromUnicodeToUTF16 = function(text, entities) {\n    twttr.txt.convertUnicodeIndices(text, entities, false);\n  };\n\n  twttr.txt.modifyIndicesFromUTF16ToUnicode = function(text, entities) {\n    twttr.txt.convertUnicodeIndices(text, entities, true);\n  };\n\n  twttr.txt.getUnicodeTextLength = function(text) {\n    return text.replace(twttr.txt.regexen.non_bmp_code_pairs, ' ').length;\n  };\n\n  twttr.txt.convertUnicodeIndices = function(text, entities, indicesInUTF16) {\n    if (entities.length == 0) {\n      return;\n    }\n\n    var charIndex = 0;\n    var codePointIndex = 0;\n\n    // sort entities by start index\n    entities.sort(function(a,b){ return a.indices[0] - b.indices[0]; });\n    var entityIndex = 0;\n    var entity = entities[0];\n\n    while (charIndex < text.length) {\n      if (entity.indices[0] == (indicesInUTF16 ? charIndex : codePointIndex)) {\n        var len = entity.indices[1] - entity.indices[0];\n        entity.indices[0] = indicesInUTF16 ? codePointIndex : charIndex;\n        entity.indices[1] = entity.indices[0] + len;\n\n        entityIndex++;\n        if (entityIndex == entities.length) {\n          // no more entity\n          break;\n        }\n        entity = entities[entityIndex];\n      }\n\n      var c = text.charCodeAt(charIndex);\n      if (0xD800 <= c && c <= 0xDBFF && charIndex < text.length - 1) {\n        // Found high surrogate char\n        c = text.charCodeAt(charIndex + 1);\n        if (0xDC00 <= c && c <= 0xDFFF) {\n          // Found surrogate pair\n          charIndex++;\n        }\n      }\n      codePointIndex++;\n      charIndex++;\n    }\n  };\n\n  // this essentially does text.split(/<|>/)\n  // except that won't work in IE, where empty strings are ommitted\n  // so \"<>\".split(/<|>/) => [] in IE, but is [\"\", \"\", \"\"] in all others\n  // but \"<<\".split(\"<\") => [\"\", \"\", \"\"]\n  twttr.txt.splitTags = function(text) {\n    var firstSplits = text.split(\"<\"),\n        secondSplits,\n        allSplits = [],\n        split;\n\n    for (var i = 0; i < firstSplits.length; i += 1) {\n      split = firstSplits[i];\n      if (!split) {\n        allSplits.push(\"\");\n      } else {\n        secondSplits = split.split(\">\");\n        for (var j = 0; j < secondSplits.length; j += 1) {\n          allSplits.push(secondSplits[j]);\n        }\n      }\n    }\n\n    return allSplits;\n  };\n\n  twttr.txt.hitHighlight = function(text, hits, options) {\n    var defaultHighlightTag = \"em\";\n\n    hits = hits || [];\n    options = options || {};\n\n    if (hits.length === 0) {\n      return text;\n    }\n\n    var tagName = options.tag || defaultHighlightTag,\n        tags = [\"<\" + tagName + \">\", \"</\" + tagName + \">\"],\n        chunks = twttr.txt.splitTags(text),\n        i,\n        j,\n        result = \"\",\n        chunkIndex = 0,\n        chunk = chunks[0],\n        prevChunksLen = 0,\n        chunkCursor = 0,\n        startInChunk = false,\n        chunkChars = chunk,\n        flatHits = [],\n        index,\n        hit,\n        tag,\n        placed,\n        hitSpot;\n\n    for (i = 0; i < hits.length; i += 1) {\n      for (j = 0; j < hits[i].length; j += 1) {\n        flatHits.push(hits[i][j]);\n      }\n    }\n\n    for (index = 0; index < flatHits.length; index += 1) {\n      hit = flatHits[index];\n      tag = tags[index % 2];\n      placed = false;\n\n      while (chunk != null && hit >= prevChunksLen + chunk.length) {\n        result += chunkChars.slice(chunkCursor);\n        if (startInChunk && hit === prevChunksLen + chunkChars.length) {\n          result += tag;\n          placed = true;\n        }\n\n        if (chunks[chunkIndex + 1]) {\n          result += \"<\" + chunks[chunkIndex + 1] + \">\";\n        }\n\n        prevChunksLen += chunkChars.length;\n        chunkCursor = 0;\n        chunkIndex += 2;\n        chunk = chunks[chunkIndex];\n        chunkChars = chunk;\n        startInChunk = false;\n      }\n\n      if (!placed && chunk != null) {\n        hitSpot = hit - prevChunksLen;\n        result += chunkChars.slice(chunkCursor, hitSpot) + tag;\n        chunkCursor = hitSpot;\n        if (index % 2 === 0) {\n          startInChunk = true;\n        } else {\n          startInChunk = false;\n        }\n      } else if(!placed) {\n        placed = true;\n        result += tag;\n      }\n    }\n\n    if (chunk != null) {\n      if (chunkCursor < chunkChars.length) {\n        result += chunkChars.slice(chunkCursor);\n      }\n      for (index = chunkIndex + 1; index < chunks.length; index += 1) {\n        result += (index % 2 === 0 ? chunks[index] : \"<\" + chunks[index] + \">\");\n      }\n    }\n\n    return result;\n  };\n\n  var MAX_LENGTH = 140;\n\n  // Returns the length of Tweet text with consideration to t.co URL replacement\n  // and chars outside the basic multilingual plane that use 2 UTF16 code points\n  twttr.txt.getTweetLength = function(text, options) {\n    if (!options) {\n      options = {\n          // These come from https://api.twitter.com/1.1/help/configuration.json\n          // described by https://dev.twitter.com/rest/reference/get/help/configuration\n          short_url_length: 23,\n          short_url_length_https: 23\n      };\n    }\n    var textLength = twttr.txt.getUnicodeTextLength(text),\n        urlsWithIndices = twttr.txt.extractUrlsWithIndices(text);\n    twttr.txt.modifyIndicesFromUTF16ToUnicode(text, urlsWithIndices);\n\n    for (var i = 0; i < urlsWithIndices.length; i++) {\n      // Subtract the length of the original URL\n      textLength += urlsWithIndices[i].indices[0] - urlsWithIndices[i].indices[1];\n\n      // Add 23 characters for URL starting with https://\n      // http:// URLs still use https://t.co so they are 23 characters as well\n      if (urlsWithIndices[i].url.toLowerCase().match(twttr.txt.regexen.urlHasHttps)) {\n         textLength += options.short_url_length_https;\n      } else {\n        textLength += options.short_url_length;\n      }\n    }\n\n    return textLength;\n  };\n\n  // Check the text for any reason that it may not be valid as a Tweet. This is meant as a pre-validation\n  // before posting to api.twitter.com. There are several server-side reasons for Tweets to fail but this pre-validation\n  // will allow quicker feedback.\n  //\n  // Returns false if this text is valid. Otherwise one of the following strings will be returned:\n  //\n  //   \"too_long\": if the text is too long\n  //   \"empty\": if the text is nil or empty\n  //   \"invalid_characters\": if the text contains non-Unicode or any of the disallowed Unicode characters\n  twttr.txt.isInvalidTweet = function(text) {\n    if (!text) {\n      return \"empty\";\n    }\n\n    // Determine max length independent of URL length\n    if (twttr.txt.getTweetLength(text) > MAX_LENGTH) {\n      return \"too_long\";\n    }\n\n    if (twttr.txt.hasInvalidCharacters(text)) {\n      return \"invalid_characters\";\n    }\n\n    return false;\n  };\n\n  twttr.txt.hasInvalidCharacters = function(text) {\n    return twttr.txt.regexen.invalid_chars.test(text);\n  };\n\n  twttr.txt.isValidTweetText = function(text) {\n    return !twttr.txt.isInvalidTweet(text);\n  };\n\n  twttr.txt.isValidUsername = function(username) {\n    if (!username) {\n      return false;\n    }\n\n    var extracted = twttr.txt.extractMentions(username);\n\n    // Should extract the username minus the @ sign, hence the .slice(1)\n    return extracted.length === 1 && extracted[0] === username.slice(1);\n  };\n\n  var VALID_LIST_RE = regexSupplant(/^#{validMentionOrList}$/);\n\n  twttr.txt.isValidList = function(usernameList) {\n    var match = usernameList.match(VALID_LIST_RE);\n\n    // Must have matched and had nothing before or after\n    return !!(match && match[1] == \"\" && match[4]);\n  };\n\n  twttr.txt.isValidHashtag = function(hashtag) {\n    if (!hashtag) {\n      return false;\n    }\n\n    var extracted = twttr.txt.extractHashtags(hashtag);\n\n    // Should extract the hashtag minus the # sign, hence the .slice(1)\n    return extracted.length === 1 && extracted[0] === hashtag.slice(1);\n  };\n\n  twttr.txt.isValidUrl = function(url, unicodeDomains, requireProtocol) {\n    if (unicodeDomains == null) {\n      unicodeDomains = true;\n    }\n\n    if (requireProtocol == null) {\n      requireProtocol = true;\n    }\n\n    if (!url) {\n      return false;\n    }\n\n    var urlParts = url.match(twttr.txt.regexen.validateUrlUnencoded);\n\n    if (!urlParts || urlParts[0] !== url) {\n      return false;\n    }\n\n    var scheme = urlParts[1],\n        authority = urlParts[2],\n        path = urlParts[3],\n        query = urlParts[4],\n        fragment = urlParts[5];\n\n    if (!(\n      (!requireProtocol || (isValidMatch(scheme, twttr.txt.regexen.validateUrlScheme) && scheme.match(/^https?$/i))) &&\n      isValidMatch(path, twttr.txt.regexen.validateUrlPath) &&\n      isValidMatch(query, twttr.txt.regexen.validateUrlQuery, true) &&\n      isValidMatch(fragment, twttr.txt.regexen.validateUrlFragment, true)\n    )) {\n      return false;\n    }\n\n    return (unicodeDomains && isValidMatch(authority, twttr.txt.regexen.validateUrlUnicodeAuthority)) ||\n           (!unicodeDomains && isValidMatch(authority, twttr.txt.regexen.validateUrlAuthority));\n  };\n\n  function isValidMatch(string, regex, optional) {\n    if (!optional) {\n      // RegExp[\"$&\"] is the text of the last match\n      // blank strings are ok, but are falsy, so we check stringiness instead of truthiness\n      return ((typeof string === \"string\") && string.match(regex) && RegExp[\"$&\"] === string);\n    }\n\n    // RegExp[\"$&\"] is the text of the last match\n    return (!string || (string.match(regex) && RegExp[\"$&\"] === string));\n  }\n\n  if (typeof module != 'undefined' && module.exports) {\n    module.exports = twttr.txt;\n  }\n\n  if (typeof define == 'function' && define.amd) {\n    define([], twttr.txt);\n  }\n\n  if (typeof window != 'undefined') {\n    if (window.twttr) {\n      for (var prop in twttr) {\n        window.twttr[prop] = twttr[prop];\n      }\n    } else {\n      window.twttr = twttr;\n    }\n  }\n})();\n"}